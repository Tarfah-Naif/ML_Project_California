# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13-n_obWxMK3y9kJ2Gf7JQPZ04oBqXpJf
"""

import pandas as pd
import numpy as np
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, mean_squared_error, classification_report
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.svm import SVC, SVR
from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LinearRegression
from sklearn.neural_network import MLPClassifier, MLPRegressor

housing = fetch_california_housing(as_frame=True)
X = housing.data
y = housing.target

bins = [0, 1.5, 3, 5]
labels = ['Low', 'Medium', 'High']
y_class = pd.cut(y, bins=bins, labels=labels)

X_train_c, X_test_c, y_train_c, y_test_c = train_test_split(X, y_class, test_size=0.2, random_state=42)
X_train_r, X_test_r, y_train_r, y_test_r = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_c = scaler.fit_transform(X_train_c)
X_test_c = scaler.transform(X_test_c)
X_train_r = scaler.fit_transform(X_train_r)
X_test_r = scaler.transform(X_test_r)

le = LabelEncoder()
y_train_c_enc = le.fit_transform(y_train_c)
y_test_c_enc = le.transform(y_test_c)

models_classification = {
    'ANN': MLPClassifier(max_iter=500, random_state=42),
    'SVM': SVC(random_state=42),
    'Naive Bayes': GaussianNB(),
    'KNN': KNeighborsClassifier(),
    'Random Forest': RandomForestClassifier(random_state=42),
    'Decision Tree': DecisionTreeClassifier(random_state=42)
}

models_regression = {
    'Linear Regression': LinearRegression(),
    'Random Forest Regressor': RandomForestRegressor(random_state=42),
    'SVM Regressor': SVR(),
    'KNN Regressor': KNeighborsRegressor(),
    'Decision Tree Regressor': DecisionTreeRegressor(),
    'ANN Regressor': MLPRegressor(max_iter=500, random_state=42)
}

print("=== Classification Results ===")
for name, model in models_classification.items():
    model.fit(X_train_c, y_train_c_enc)
    preds = model.predict(X_test_c)
    acc = accuracy_score(y_test_c_enc, preds)
    print(f"{name} Accuracy: {acc:.4f}")
    print(classification_report(y_test_c_enc, preds))
    print("-" * 40)

print("=== Regression Results ===")
for name, model in models_regression.items():
    model.fit(X_train_r, y_train_r)
    preds = model.predict(X_test_r)
    mse = mean_squared_error(y_test_r, preds)
    rmse = np.sqrt(mse)
    print(f"{name} RMSE: {rmse:.4f}")
    print("-" * 40)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

classification_results = []
for name, model in models_classification.items():
    model.fit(X_train_c, y_train_c_enc)
    preds = model.predict(X_test_c)
    acc = accuracy_score(y_test_c_enc, preds)
    classification_results.append({
        'Model': name,
        'Accuracy': acc,
        'F1 Score (macro)': classification_report(y_test_c_enc, preds, output_dict=True)['macro avg']['f1-score']
    })

regression_results = []
for name, model in models_regression.items():
    model.fit(X_train_r, y_train_r)
    preds = model.predict(X_test_r)
    mse = mean_squared_error(y_test_r, preds)
    rmse = np.sqrt(mse)
    regression_results.append({'Model': name, 'RMSE': rmse})

df_classification = pd.DataFrame(classification_results)
df_regression = pd.DataFrame(regression_results)

print(df_classification)
print(df_regression)

sns.set(style="whitegrid")

plt.figure(figsize=(10,5))
sns.barplot(data=df_classification, x='Model', y='Accuracy')
plt.title('Classification Accuracy of Models')
plt.ylim(0, 1)
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10,5))
sns.barplot(data=df_regression, x='Model', y='RMSE')
plt.title('Regression RMSE of Models')
plt.xticks(rotation=45)
plt.show()

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

for name, model in models_classification.items():
    model.fit(X_train_c, y_train_c_enc)
    preds = model.predict(X_test_c)
    cm = confusion_matrix(y_test_c_enc, preds)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)
    disp.plot(cmap=plt.cm.Blues)
    plt.title(f'Confusion Matrix - {name}')
    plt.show()

classification_results = []
for name, model in models_classification.items():
    model.fit(X_train_c, y_train_c_enc)
    preds = model.predict(X_test_c)
    report = classification_report(y_test_c_enc, preds, output_dict=True)
    classification_results.append({
        'Model': name,
        'Accuracy': report['accuracy'],
        'F1 Score (macro)': report['macro avg']['f1-score']
    })

df_classification = pd.DataFrame(classification_results)
df_classification.set_index('Model', inplace=True)

plt.figure(figsize=(8, 6))
sns.heatmap(df_classification, annot=True, cmap='YlGnBu', fmt=".4f")
plt.title('Classification Metrics Heatmap')
plt.show()

import os
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.svm import SVR, SVC
from sklearn.neighbors import KNeighborsRegressor, KNeighborsClassifier
from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LinearRegression
from sklearn.neural_network import MLPRegressor, MLPClassifier

os.makedirs('Data/original_data', exist_ok=True)
os.makedirs('Data/preprocessed_data', exist_ok=True)
os.makedirs('Results', exist_ok=True)
os.makedirs('Code', exist_ok=True)

df_train = pd.DataFrame(X_train_r, columns=housing.feature_names)
df_train['target'] = y_train_r
df_train.to_csv('Data/original_data/california_housing_train.csv', index=False)

df_test = pd.DataFrame(X_test_r, columns=housing.feature_names)
df_test['target'] = y_test_r
df_test.to_csv('Data/original_data/california_housing_test.csv', index=False)

np.savetxt('Data/preprocessed_data/X_train.csv', X_train_r, delimiter=',')
np.savetxt('Data/preprocessed_data/X_test.csv', X_test_r, delimiter=',')
np.savetxt('Data/preprocessed_data/Y_train.csv', y_train_r, delimiter=',')
np.savetxt('Data/preprocessed_data/Y_test.csv', y_test_r, delimiter=',')

models_regression = {
    'RF_model': RandomForestRegressor(random_state=42),
    'SVM_model': SVR(),
    'KNN_model': KNeighborsRegressor(),
    'Decision_Tree_model': DecisionTreeRegressor(random_state=42),
    'Linear_Regression_model': LinearRegression(),
    'ANN_model': MLPRegressor(max_iter=500, random_state=42)
}

models_classification = {
    'RF_model': RandomForestClassifier(random_state=42),
    'SVM_model': SVC(random_state=42),
    'KNN_model': KNeighborsClassifier(),
    'Decision_Tree_model': DecisionTreeClassifier(random_state=42),
    'Naive_Bayes_model': GaussianNB(),
    'ANN_model': MLPClassifier(max_iter=500, random_state=42)
}

for name, model in models_regression.items():
    model.fit(X_train_r, y_train_r)
    preds = model.predict(X_test_r)
    np.savetxt(f'Results/predictions_{name}.csv', preds, delimiter=',')

for name, model in models_classification.items():
    model.fit(X_train_c, y_train_c_enc)
    preds = model.predict(X_test_c)
    np.savetxt(f'Results/predictions_{name}.csv', preds, delimiter=',')